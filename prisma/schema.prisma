// If changes are made to prisma schema
// when you run: npx prisma generate
// then inteli sense will refrect new models
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "native"]
}

//differnt greetings for diffrent roles
model General {
  // Primary Key
  role Int @id

  // Scalar Fields
  name      String
  body      String
  names     String[]
  icondatas Int[]
  urls      String[]
}

model User {
  // Composite key, no two aircraft will have same name
  // However, one name may have multiple accses levels, as long as they are on diffrent aircraft

  aircraft   Aircraft @relation(fields: [aircraftid], references: [id])
  aircraftid Int

  //scalar values
  userid Int    @unique @default(autoincrement())
  name   String // used to identify users, but this is not unique because it will be duplicatied if the user is assined to multple aircraft @map("name")
  role   Int    @default(0)
  @@id([aircraftid, name])
}


model Aircraft {
  // Primary Key
  id Int @id @default(autoincrement())

  // Scalar Fields
  name          String @unique
  fs0           Float
  fs1           Float
  mom0          Float
  mom1          Float
  weight0       Float
  weight1       Float
  cargoweight1  Float
  lemac         Float
  mac           Float
  mommultiplyer Float

  // 1-n Relationships
  users        User[]
  glossarys    Glossary[]
  tanks        Tank[]
  configs      Config[]
  cargos       Cargo[]
  configcargos ConfigCargo[]
}

model Glossary {
  // Compund forein key, name will be unique in a given aircraft

  // Relation Fields / Foriegn Key
  aircraft   Aircraft @relation(fields: [aircraftid], references: [id])
  aircraftid Int

  // Scalar Fields
  glossaryid Int    @unique @default(autoincrement())
  name       String
  body       String
  @@id([name, aircraftid])
}

model Tank {
  // Compund forien key, unique tank tame for each aircraft
  name String

  // Relation Fields / Foriegn Key
  aircraft   Aircraft @relation(fields: [aircraftid], references: [id])
  aircraftid Int

  // Scalar Fields
  tankid     Int    @unique @default(autoincrement())
  weights    String // csv
  simplemoms String // csv
  @@id([aircraftid, name])
}

model Config {
  // Compund foriegn key, one config name per aircraftname
  // Relation Fields / Foriegn Key
  aircraft   Aircraft @relation(fields: [aircraftid], references: [id])
  aircraftid Int

  // Scalar Fields
  configid Int    @unique @default(autoincrement())
  name     String

  // 1-n Relationships
  configcargos ConfigCargo[]
  @@id([name, aircraftid])
}

model Cargo {
  // Compund foriegn key, one cargo name per aircraft name

  // Relation Fields / Foriegn Key
  aircraft     Aircraft      @relation(fields: [aircraftid], references: [id])
  aircraftid   Int
  configCargos ConfigCargo[]

  // Scalar Fields
  cargoid        Int            @unique @default(autoincrement())
  updated   DateTime       @updatedAt
  updatedBy String         @default("unknown")
  name           String
  weight         Float
  fs             Float?         @default(-1) // distance cannot be nagative, this ensures imports will wil invalid without inputing fs
  category       CargoCategory? @default(Extra)
  @@id([name, aircraftid])
}

enum CargoCategory {
  Steward    @map("steward")
  Emergency  @map("emergency")
  Extra     @map("extra")

  @@map("_CargoCategory")
}

model ConfigCargo {
  // Compund foriegn key, no two cargoid will be under the same config and aircraft
  // for example aircraft c17a with c2 config cannot have 2 rows of watercontainers.
  // additinal qty is hanlded by the qty, not by adding more rows

  // Relation Fields / Foriegn Key
  config     Config   @relation(fields: [configid], references: [configid])
  configid   Int
  aircraft   Aircraft @relation(fields: [aircraftid], references: [id])
  aircraftid Int
  cargo      Cargo    @relation(fields: [cargoid], references: [cargoid])
  cargoid    Int

  // Scalar Fields,
  //this is not a relashionship with cargo to allow ui flexibility when admin changes configurations
  configcargoid Int   @unique @default(autoincrement())
  fs            Float
  qty           Int
  @@id([configid, aircraftid, cargoid])
}
