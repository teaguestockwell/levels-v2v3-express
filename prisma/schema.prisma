// If changes are made to prisma schema
// when you run: npx prisma generate 
// then inteli sense will refrect new models
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x","native"]
}

enum Role {
  USER
  ADMIN
}

//db admin role can be greeted with admin inscructions on home screen
model General{
  // Primary Key
  role          Role @id

  // Scalar Fields
  title         String
  body          String
  icondata      Int[]
  url           String[]
}

model admin{
  // Compund forien key, unique admin email per aircraftname
  @@id([email,aircraftname])
  email          String 

  // Relation Fields / Foriegn Key
  aircraft       Aircraft @relation(fields:[aircraftname], references:[name])
  aircraftname   String
}


model Aircraft{
  // Primary Key
  name          String  @id  

  // Scalar Fields
  fs0           Float 
  fs1           Float
  mom0          Float 
  mom1          Float
  weight0       Float
  weight1       Float
  cargoweight1  Float
  lemac         Float
  mac           Float
  mommultiplyer Float  

  // 1-n Relationships
  glossarys     Glossary[]
  tanks         Tank[] 
  configs       Config[] 
  cargos        Cargo[]
}

model Glossary{
  // Compund forein key, title will be unique in a given aircraft
  @@id([title,aircraftname])

  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftname], references: [name])
  aircraftname  String

  // Scalar Fields
  title         String @unique
  body          String
}
model Tank{
  // Compund forien key, unique tank tame for each aircraft
  @@id([aircraftname,name])
  name          String 

  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftname], references: [name])
  aircraftname  String

  // Scalar Fields
  weights       String // csv
  simplemoms    String // csv
}

model Config{
  // Compund foriegn key, one config name per aircraftname
  @@id([name,aircraftname])
  
  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftname], references: [name])
  aircraftname  String     

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique
  name          String

  // 1-n Relationships
  cargoinconfig  CargoInConfig[]
}

model Cargo{
  // Compund foriegn key, one cargo name per aircraft name
  @@id([name,aircraftname])
  
  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftname], references: [name])
  aircraftname  String

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique
  name          String
  weight        Float
  fs            Float    @default(-1) // distance cannot be nagative, this ensures imports will wil invalid without inputing fs
}

model CargoInConfig{
  // Compund foriegn key, no two cargos with the same name will be under the same config and aircraft
  @@id([cargoid,configid,aircraftname])

  // Relation Fields / Foriegn Key
  cargo         Cargo @relation(fields: [cargoid], references: [id])
  cargoid       Int
  config        Config @relation(fields: [configid], references: [id])
  configid      Int
  aircraft      Aircraft @relation(fields: [aircraftname], references:[name])
  aircraftname  String 

  // Scalar Fields, cargo in config overide config fs, and also add qty
  fs            Float
  qty           Int
}