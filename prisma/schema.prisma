// If changes are made to prisma schema
// when you run: npx prisma generate 
// then inteli sense will refrect new models
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x","native"]
}

enum Role {
  USER
  ADMIN
}

//db admin role can be greeted with admin inscructions on home screen by changing title and body
model General{
  // Primary Key
  role          Role @id

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique  
  title         String
  body          String
  icondata      Int[]
  url           String[]
}

model Admin{
  // Compund forien key, unique admin email per aircraftname
  @@id([email,aircraftname])
  email          String 

  // Relation Fields / Foriegn Key
  aircraft       Aircraft @relation(fields:[aircraftname], references:[name])
  aircraftname   String

  //scalar fields
  id            Int       @default(autoincrement()) @unique  
}


model Aircraft{
  // Primary Key
  id            Int     @id @default(autoincrement()) 

  // Scalar Fields
  name          String  @unique 
  fs0           Float 
  fs1           Float
  mom0          Float 
  mom1          Float
  weight0       Float
  weight1       Float
  cargoweight1  Float
  lemac         Float
  mac           Float
  mommultiplyer Float  

  // 1-n Relationships
  glossarys     Glossary[]
  tanks         Tank[] 
  configs       Config[] 
  cargos        Cargo[]
}

model Glossary{
  // Compund forein key, title will be unique in a given aircraft
  @@id([title,aircraftid])

  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftid], references: [id])
  aircraftid    Int

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique   
  title         String 
  body          String
}
model Tank{
  // Compund forien key, unique tank tame for each aircraft
  @@id([aircraftid,name])
  name          String 

  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftid], references: [id])
  aircraftid    Int

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique  
  weights       String // csv
  simplemoms    String // csv
}

model Config{
  // Compund foriegn key, one config name per aircraftname
  @@id([name,aircraftid])
  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftid], references: [id])
  aircraftid    Int     

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique
  name          String

  // 1-n Relationships
  configcargos  ConfigCargo[]
}

model Cargo{
  // Compund foriegn key, one cargo name per aircraft name
  @@id([name,aircraftid])
  
  // Relation Fields / Foriegn Key
  aircraft      Aircraft  @relation(fields: [aircraftid], references: [id])
  aircraftid    Int

  // Scalar Fields
  id            Int       @default(autoincrement()) @unique  
  name          String
  weight        Float
  fs            Float    @default(-1) // distance cannot be nagative, this ensures imports will wil invalid without inputing fs
}

model ConfigCargo{
  // Compund foriegn key, no two cargos with the same name will be under the same config and aircraft
  @@id([configid,aircraftid,name])

  // Relation Fields / Foriegn Key
  config        Config @relation(fields: [configid], references: [id])
  configid      Int
  aircraft      Aircraft @relation(fields: [aircraftid], references:[id])
  aircraftid    Int 

  // Scalar Fields,
  //this is not a relashionship with cargo to allow ui flexibility when admin changes configurations
  id            Int       @default(autoincrement()) @unique  
  name          String
  weight        Float
  fs            Float 
  qty           Int      
}